name: CI

on:
  push:
    branches:
      - main
  pull_request:

env:
  DEBUG: 'napi:*'
  MACOSX_DEPLOYMENT_TARGET: '10.13'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        targets:
          [
            'x86_64-apple-darwin',
            'aarch64-apple-darwin',
            'x86_64-pc-windows-msvc',
            'i686-pc-windows-msvc',
            'aarch64-pc-windows-msvc',
            'x86_64-unknown-linux-gnu',
            'aarch64-unknown-linux-gnu',
            'x86_64-unknown-linux-musl',
            'aarch64-unknown-linux-musl',
            'armv7-unknown-linux-gnueabihf',
            'aarch64-linux-android',
            'armv7-linux-androideabi',
          ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.targets }}
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: yarn
      - name: Install ziglang
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.11.0
      - run: cargo install cargo-xwin
      - run: yarn install
      - run: yarn build --target ${{ matrix.targets }}
      - uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.targets }}
          path: ./*.node
          if-no-files-found: error

  test-host:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - target: x86_64-apple-darwin
            host: macos-latest
          - target: x86_64-pc-windows-msvc
            host: windows-latest
          - target: i686-pc-windows-msvc
            host: windows-latest
        node: [18, 20]
    runs-on: ${{ matrix.settings.host }}
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
      - name: Setup Node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: yarn install
      - name: Setup Node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
          architecture: x86
      - name: Download bindings
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .
      - name: Run tests
        run: yarn test

  test-docker:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - target: x86_64-unknown-linux-gnu
            docker: node:lts-slim
            args: ''
          - target: aarch64-unknown-linux-gnu
            docker: node:lts-slim
            args: '--platform linux/arm64'
          - target: x86_64-unknown-linux-musl
            docker: node:lts-alpine
            args: ''
          - target: aarch64-unknown-linux-musl
            docker: node:lts-alpine
            args: '--platform linux/arm64'
          - target: armv7-unknown-linux-gnueabihf
            docker: node:lts-bullseye-slim
            args: '--platform linux/arm/v7'
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Download bindings
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ./
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,arm
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Run tests
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ matrix.settings.docker }}
          options: ${{ matrix.settings.args }} -v ${{ github.workspace }}:/build -w /build
          run: |
            set -e
            yarn test

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - build
      - test-host
      - test-docker
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: yarn
      - name: Install dependencies
        run: yarn install --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Move artifacts
        run: yarn artifacts
      - name: List packages
        run: ls -R npm
        shell: bash
      - name: Publish
        run: |
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
